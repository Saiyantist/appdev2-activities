As an experienced professional in the software industry, you are currently employed at
a company that has developed its own software solution, integrating various third-party software components.


Recently, your team encountered a significant challenge with one of your third-party software providers.
The provider notified you that they would cease support for your current implementation and required you to upgrade
your codebase to align with their new implementation standards.

This unexpected development prompted your team to reflect on your processes and consider preventive measures
to mitigate similar challenges in the future. While this issue primarily concerns the third-party software provider,
it raises questions about your approach to software integration and dependency management.


For this activity, simply choose one question you wish to answer.
    1. What initial steps could your team have taken to anticipate potential changes or discontinuation of support from third-party software providers?
    2. How can you improve your communication and relationship with third-party software providers to stay informed about upcoming changes or updates?
    3. In what ways can you enhance your software architecture and design to minimize dependencies on external components and facilitate easier migration when necessary?
    4. What strategies can you implement to ensure timely updates and maintenance of your software to adapt to changes in third-party software requirements?
    5. Reflecting on your experience, what lessons have you learned, and what actionable steps can you take to prevent similar issues in the future?


3.  In what ways can you enhance your software architecture and design to minimize dependencies
    on external components and facilitate easier migration when necessary?


    As a Tech Lead,

    I should clearly define and have a deep understanding on the specific requirements of our project that majorly concerns
    the software architecture adaptability, and then there have a sense of pre-cognition or have provisions on what this project
    could look like when disruptive changes would arise.
    
    Mapping out our functional and nonfunctional requirements is one way to help me see the architecture and the design
    of our project as this would help me narrow down the technology that we may use for the project.

    Then, I would start drafting out the software architecture with the System Analysts and try to divide it into two kinds of slices,
    If I would horizontally slice the architecture, I would be able to see the components/layers and I could identify which would be reluctant
    and take note of this. If I would vertically slice it, I would be able to see the project's parts where I could have high product delivery
    based on rich features. 
    
    Last but not the least, a good organized knowledge base of the architecture and well-documented revision history of the design would be a helpful
    decision variable on what techonology we might use to migrate into when necessary.